from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

# Function to check if the total price is correct
def get_total_price():
    try:
        total_price_element = wait.until(EC.presence_of_element_located(
            (By.XPATH, "//h3[contains(@class, 'text-right') and contains(text(), 'Total')]")
        ))
        return total_price_element.text
    except Exception as e:
        print(f" Failed to find total price: {e}")
        return None

# Setup WebDriver and go to the site
driver = webdriver.Chrome()
wait = WebDriverWait(driver, 10)
driver.get("https://weathershopper.pythonanywhere.com/moisturizer")
driver.maximize_window()

# Step 1: Add the same product multiple times (2 times for this example)
product_cards = wait.until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, ".text-center.col-4")))

# Click on the "Add" button twice for the first product
add_button = product_cards[0].find_element(By.TAG_NAME, "button")
driver.execute_script("arguments[0].scrollIntoView();", add_button)
wait.until(EC.element_to_be_clickable(add_button))
add_button.click()  # Add first time
time.sleep(1)  # Optional sleep to ensure action is registered
add_button.click()  # Add second time

# Step 2: Go to cart
cart_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[contains(text(),'Cart')]")))
cart_button.click()

# Step 3: Wait for the cart table to load completely
wait.until(EC.presence_of_element_located((By.XPATH, "//table[@class='table table-striped']")))  # Wait for the cart table
print(" Cart page loaded successfully!")

# Step 4: Check for the number of products in the cart (should be at least 2 of the same product)
cart_rows = wait.until(EC.presence_of_all_elements_located(
    (By.XPATH, "//table[@class='table table-striped']//tr[td]")  # Any row with product information
))

if len(cart_rows) == 2:
    print(" Correct: Cart has 2 items (duplicate products).")
else:
    print(f" Defect Found: Expected 2 duplicate items, but found {len(cart_rows)}.")

# Step 5: Check if the total price is updated correctly
total_price = get_total_price()
if total_price:
    print(f" Total price in cart: {total_price}")
else:
    print(" Failed to get total price.")

# Step 6: Check for defects in the cart (e.g., price not updating correctly)
# In this example, let's assume we know the price of one product is "$20.00"
# We expect the total price to be $40.00 when the same product is added twice.
expected_total_price = "$40.00"  # You can adjust based on actual product price

if total_price != expected_total_price:
    print(f" Defect found! Expected total price: {expected_total_price}, but found: {total_price}")
else:
    print("Total price is correct!")

# Step 7: Check for any other potential defects (like missing elements or improper styling)
# For example, you can check if a 'Checkout' button exists in the cart (if it should be visible)
try:
    checkout_button = wait.until(EC.presence_of_element_located((By.XPATH, "//button[contains(text(), 'Checkout')]")))
    print(" Checkout button is present.")
except:
    print("Checkout button is missing from the cart!")

# Step 8: Clean up
driver.quit()
